[
    {
        "id": 1,
        "title": "What is Cors ?",
        "ans": "Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a 'preflight' request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request."
    },
    {
        "id": 2,
        "title": "Why are you using firebase? What other options do you have to implement authentication ?",
        "ans": "I am using firebase to authenticate users with the facility of three authentication system. They are: \n 1) Email & Passwaord Authentication. \n 2) Google Authentication. \n 3) Github Authentication. \n\n Beside Firebase I can implement Authentication using: \n 1) MongoDB \n 2) Auth0 \n 3) Okta \n 4) Amazon Cognito \n 5) JSON Web Token \n\n"
    },
    {
        "id": 3,
        "title": "How does the private route work ?",
        "ans": "The private route component is similar to the public route, the only change is that redirect URL and authenticate condition. If the user is not authenticated he will be redirected to the login page and the user can only access the authenticated routes If he is authenticated. Private Routes vary based on the Apps, For example, Dashboard, User Profile, App Settings, Home etc. In simple words, These routes can be accessed only after login. The constraints for Public and Private routes are that Public routes should not be accessed after login and Private routes should not be accessible before login."
    },
    {
        "id": 4,
        "title": "What is Node? How does Node work ?",
        "ans": "Node. js is an open-source, cross-platform JavaScript runtime environment and library for running web applications outside the client's browser. It is a used as backend service where javascript works on the server-side of the application. At a high level, Node.js combines the Google V8 JavaScript engine, a single-threaded non-blocking event loop, and a low-level I/O API. The stripped-down example code shown below illustrates the basic HTTP server pattern, using ES6 arrow functions for the callbacks. There is a framework called express.js which makes it much easier to create API with Node."
    }
]